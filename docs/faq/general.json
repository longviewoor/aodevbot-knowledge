[
  {
    "question": "What is AO?",
    "answer": "AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications.",
    "tags": ["ao", "arweave", "general"]
  },
  {
    "question": "What does \"AO\" stand for?",
    "answer": "AO stands for Actor-Oriented. AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications. [Video](https://video.twimg.com/amplify_video/1935699115926761472/vid/avc1/1280x720/Yy8kie8Y5_WS5Atm.mp4?tag=14)",
    "tags": ["ao", "protocol", "definition"]
  },
  {
    "question": "What is Arweave?",
    "answer": "Arweave is a blockchain-like protocol designed for permanent data storage. It allows users to store data indefinitely by incentivizing miners to maintain the network.",
    "tags": ["arweave", "blockchain", "storage"]
  },
  {
    "question": "What are AO processes?",
    "answer": "An AO process is a smart contract deployed on AO. Processes hold state, receive messages, and have functions to handle different interactions.",
    "tags": ["ao", "processes", "smart contracts"]
  },
  {
    "question": "What is an Arweave Wallet?",
    "answer": "An Arweave wallet is a crypto wallet which stores and holds $AR tokens. A wallet can be used to deploy AO processes, and upload data to be stored on Arweave.",
    "tags": ["arweave", "wallet", "crypto"]
  },
  {
    "question": "How does AO work with Arweave?",
    "answer": "AO is built on top of Arweave's permanent storage network, using it as the base layer for process and message storage.\n\nAll messages sent between AO processes are stored on Arweave. This creates an immutable audit trail of all interactions, and enables AO's \"holographic state\" - the message history can be replayed/executed in order to get the state of any process.\n\nThe relationship is symbiotic: Arweave provides the **storage layer**, while AO provides the **computational layer**. AO processes can also directly access data stored on Arweave through assignment mechanisms - you can pull in any Arweave transaction as input to your process computation.\n\nThis makes AO particularly powerful for applications requiring long-term data integrity, auditability, or decentralized computation that needs to persist beyond the lifetime of any particular infrastructure. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "arweave", "storage", "holographic state"]
  },
  {
    "question": "What is holographic state on AO?",
    "answer": "On AO, every single interaction with an AO process is stored as a transaction on Arweave. If you have a process and all of its interaction history, these can be used to “reconstruct” the current state of a process.\n\nHolographic state refers to the concept that no global shared state of processes is stored on AO. Instead, AO nodes compute state on demand based on the history of a process. Since AO processes are deterministic, the current state is essentially a \"projection\" of all processed messages over time (like a hologram). \n\nAs there is no global shared state system, processes are concerned with their own state and interact with each other through a message passing system. This enables true parallel execution of processes on AO. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "holographic state"]
  },
  {
    "question": "How can I set up a CRON job on AO?",
    "answer": "CRON jobs in AO allow you to execute code at specified intervals, enabling automated tasks and scheduled operations. Here's how you can set up a CRON job on AO:\n\n**1. Spawning the Process with a CRON Timer**\n\nFirst, you need to spawn your AO process with the --cron flag, specifying the interval. You can do this using the aos command-line tool. For example, to create a process that receives a CRON message every 10 seconds, you would run:\n\n```bash\naos your-process-name --cron 10-seconds\n```\n\nThis command spawns your process and tells the network to send a message with the tag Action: \"Cron\" to it at the specified interval.\n\n**2. Handling CRON Messages in Your Process**\n\nNext, you need to add a handler in your AO process to listen for and act on these CRON messages.\n\nTo handle CRON messages, you need to set up a Handler in your process with the tag Action, and value Cron.\n\n```lua\nHandlers.add(\n  \"CronTick\", -- Handler name\n  Handlers.utils.hasMatchingTag(\"Action\", \"Cron\"), -- Handler pattern to identify cron message\n  function () -- Handler task to execute on cron message\n    -- Do something\n  end\n)\n```\n\n**3. Monitoring CRON Jobs**\n\nTo initiate the subscription service for CRON messages, you must monitor your process. To initiate this you can call .monitor in aos, or via the @aoconnect library:\n\n```javascript\nimport { readFileSync } from \"node:fs\";\nimport { createDataItemSigner, monitor } from \"@permaweb/aoconnect\";\n\nconst wallet = JSON.parse(\n  readFileSync(\"/path/to/arweave/wallet.json\").toString(),\n);\n\nconst result = await monitor({\n  process: \"process-id\",\n  signer: createDataItemSigner(wallet),\n});\n```\n\nCRON jobs can be stopped by calling unmonitor. If the process receives a message, the CRON job will restart itself.\n\nThis setup provides a complete solution for creating and monitoring autonomous tasks within the AO ecosystem.",
    "tags": ["ao", "cron", "scheduling", "automation", "monitoring"]
  }
]
