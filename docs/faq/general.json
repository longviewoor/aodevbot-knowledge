[
  {
    "question": "What is AO?",
    "answer": "AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications.",
    "tags": ["ao", "arweave", "general"]
  },
  {
    "question": "What does \"AO\" stand for?",
    "answer": "AO stands for Actor-Oriented. AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications. [Video](https://video.twimg.com/amplify_video/1935699115926761472/vid/avc1/1280x720/Yy8kie8Y5_WS5Atm.mp4?tag=14)",
    "tags": ["ao", "protocol", "definition"]
  },
  {
    "question": "What is Arweave?",
    "answer": "Arweave is a blockchain-like protocol designed for permanent data storage. It allows users to store data indefinitely by incentivizing miners to maintain the network.",
    "tags": ["arweave", "blockchain", "storage"]
  },
  {
    "question": "What are AO processes?",
    "answer": "An AO process is a smart contract deployed on AO. Processes hold state, receive messages, and have functions to handle different interactions.",
    "tags": ["ao", "processes", "smart contracts"]
  },
  {
    "question": "What is an Arweave Wallet?",
    "answer": "An Arweave wallet is a crypto wallet which stores and holds $AR tokens. A wallet can be used to deploy AO processes, and upload data to be stored on Arweave.",
    "tags": ["arweave", "wallet", "crypto"]
  },
  {
    "question": "How does AO work with Arweave?",
    "answer": "AO is built on top of Arweave's permanent storage network, using it as the base layer for process and message storage.\n\nAll messages sent between AO processes are stored on Arweave. This creates an immutable audit trail of all interactions, and enables AO's \"holographic state\" - the message history can be replayed/executed in order to get the state of any process.\n\nThe relationship is symbiotic: Arweave provides the **storage layer**, while AO provides the **computational layer**. AO processes can also directly access data stored on Arweave through assignment mechanisms - you can pull in any Arweave transaction as input to your process computation.\n\nThis makes AO particularly powerful for applications requiring long-term data integrity, auditability, or decentralized computation that needs to persist beyond the lifetime of any particular infrastructure. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "arweave", "storage", "holographic state"]
  },
  {
    "question": "What is holographic state on AO?",
    "answer": "On AO, every single interaction with an AO process is stored as a transaction on Arweave. If you have a process and all of its interaction history, these can be used to “reconstruct” the current state of a process.\n\nHolographic state refers to the concept that no global shared state of processes is stored on AO. Instead, AO nodes compute state on demand based on the history of a process. Since AO processes are deterministic, the current state is essentially a \"projection\" of all processed messages over time (like a hologram). \n\nAs there is no global shared state system, processes are concerned with their own state and interact with each other through a message passing system. This enables true parallel execution of processes on AO. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "holographic state"]
  },
  {
    "question": "How do I send data from my AO process to the frontend?",
    "answer": "Here's how data flows between your AO process and frontend:\n\n**1. In the AO Process:**\n\n**JSON Serialization**: Use the json module to convert Lua tables to JSON strings that can be sent to the frontend.\n\n```lua\nlocal json = require(\"json\")\ntags.Data = json.encode(data)\n```\n\n**Message Handlers**: Create handlers that respond to specific actions requested by the frontend.\n\n```lua\nHandlers.add(\"GetUsers\", Handlers.utils.hasMatchingTag(\"Action\", \"GetUsers\"), function(msg)\n  -- Process request and send response\nend)\n```\n\nYou can use a helper function like sendReply() to ensure consistent response formatting.\n\nIt's also important to include appropriate tags like Content-Type: application/json to help the frontend process the data correctly.\n\n**2. In the Frontend:**\n\n**Message Function**: Use the message() function from @permaweb/aoconnect to send requests to your AO process.\n\n```javascript\nconst msg = await message({\n  process: processId,\n  tags: [{ name: 'Action', value: action }],\n  wallet: window.arweaveWallet\n});\n```\n\n**Result Function**: Use the result() function to get the response from your AO process.\n\n```javascript\nconst res = await result({\n  message: msgId,\n  process: processId\n});\n```\n\n**JSON Parsing**: Parse the JSON data received from the AO process.\n\n```javascript\nconst data = JSON.parse(res.Data);\n```\n\n**3. Communication Patterns:**\n\n* **Request-Response**: The frontend sends a request with a specific action, and the AO process responds with the requested data.\n* **Action Tags**: Use the Action tag to specify what operation the frontend wants the AO process to perform.\n* **Data Formatting**: Structure your data in a way that's easy to work with in both Lua (AO) and JavaScript (frontend).\n\nOnly send the data that's needed to minimize transfer size. Be mindful of what data you expose and who can access it.\n\n These allow you to leverage the power of AO processes while providing a smooth user experience through the frontend interface.",
    "tags": ["ao", "frontend", "data", "communication", "json"]
  }
]
